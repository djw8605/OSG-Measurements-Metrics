
#if $error

  <p>We're sorry, but an error occurred while collecting the data for the page.
     Please try again at a later time.
  </p>

#else

<h1>Data reported to the WLCG for $month_name, $year</h1>

<script>
my_data = {
  apel: [
    #for row in $apel[:-1]
        {Site: '$row.ExecutingSite', VO: '$row.LCGUserVO', Njobs: $row.Njobs, SumCPU: $row.SumCPU, NormSumCPU: $row.NormSumCPU, SumWCT: $row.SumWCT, NormSumWCT: $row.NormSumWCT, Start: "$row.RecordStart", End: "$row.RecordEnd", Norm: $row.NormFactor},
    #end for
        #set row=$apel[-1]
        {Site: '$row.ExecutingSite', VO: '$row.LCGUserVO', Njobs: $row.Njobs, SumCPU: $row.SumCPU, NormSumCPU: $row.NormSumCPU, SumWCT: $row.SumWCT, NormSumWCT: $row.NormSumWCT, Start: "$row.RecordStart", End: "$row.RecordEnd", Norm: $row.NormFactor}
  ],

  gip: [
    #set keys = sorted($subclusters.keys(), $getVar('key_sorter', '', False))
    #for key in keys[:-1]
        #set val=$subclusters[key]
        {Site: '$key[0]', Cluster: '$key[1]', Subcluster: '$key[2]', Timestamp: '$val[0]', Processor: '$val[1]', Cores: $int($val[2]), SI2K: $val[3], Ownership: '$val[4]'},
    #end for
        #set key = keys[-1]
        #set val=$subclusters[key]
        {Site: '$key[0]', Cluster: '$key[1]', Subcluster: '$key[2]', Timestamp: '$val[0]', Processor: '$val[1]', Cores: $int($val[2]), SI2K: $val[3], Ownership: '$val[4]'}
  ],

  sitenorm: [
    #set keys = sorted($site_norm.keys(), $getVar('key_sorter', '', False))
    #for key in keys[:-1]
        #set val=$site_norm[key]
        {Site: '$key', GIPNorm: $val[0], WLCGNorm: $val[1], Diff: $val[2]},
    #end for
        #set key = keys[-1]
        #set val=$site_norm[key]
        {Site: '$key', GIPNorm: $val[0], WLCGNorm: $val[1], Diff: $val[2]}
  ],

  cms_pledge: [
    #set keys = sorted($pledge['cms'].keys(), $getVar('key_sorter', '', False))
    #for key in keys[:-1]
        #set val=$pledge['cms'][key]
        #set goal=int(float($val.pledge)*$val.efficiency*$val.days_in_month*24)
        #set delivered=int($val.wlcgNormWCT/float($goal)*100)
        #set nonwlcg=int(($val.totalNormWCT-$val.wlcgNormWCT)/float($val.totalNormWCT)*100)
        {WLCGSite: '$key', Pledge: $val.pledge, Actual: $val.actual, Goal: $goal, KSI2KAvail: $act_avail[key], OwnedWCT: $val.voNormWCT, wlcgWCT: $val.wlcgNormWCT, totalWCT: $val.totalNormWCT, delivered: $delivered, nonwlcg: $nonwlcg},
    #end for
        #set key=keys[-1]
        #set val=$pledge['cms'][key]
        #set goal=int(float($val.pledge)*$val.efficiency*$val.days_in_month*24)
        #set delivered=int($val.wlcgNormWCT/float($goal)*100)
        #set nonwlcg=int(($val.totalNormWCT-$val.wlcgNormWCT)/float($val.totalNormWCT)*100)
        {WLCGSite: '$key', Pledge: $val.pledge, Actual: $val.actual, Goal: $goal, KSI2KAvail: $act_avail[key], OwnedWCT: $val.voNormWCT, wlcgWCT: $val.wlcgNormWCT, totalWCT: $val.totalNormWCT, delivered: $delivered, nonwlcg: $nonwlcg}
  ],

  atlas_pledge: [
    #set keys = sorted($pledge['atlas'].keys(), $getVar('key_sorter', '', False))
    #for key in keys[:-1]
        #set val=$pledge['atlas'][key]
        #set goal=int(float($val.pledge)*$val.efficiency*$val.days_in_month*24)
        #set delivered=int($val.wlcgNormWCT/float($goal)*100)
        #set nonwlcg=int(($val.totalNormWCT-$val.wlcgNormWCT)/float($val.totalNormWCT)*100)
        {WLCGSite: '$key', Pledge: $val.pledge, Actual: $val.actual, Goal: $goal, KSI2KAvail: $act_avail[key], OwnedWCT: $val.voNormWCT, wlcgWCT: $val.wlcgNormWCT, totalWCT: $val.totalNormWCT, delivered: $delivered, nonwlcg: $nonwlcg},
    #end for
        #set key = keys[-1]
        #set val=$pledge['atlas'][key]
        #set goal=int(float($val.pledge)*$val.efficiency*$val.days_in_month*24)
        #set delivered=int($val.wlcgNormWCT/float($goal)*100)
        #set nonwlcg=int(($val.totalNormWCT-$val.wlcgNormWCT)/float($val.totalNormWCT)*100)
        {WLCGSite: '$key', Pledge: $val.pledge, Actual: $val.actual, Goal: $goal, KSI2KAvail: $act_avail[key], OwnedWCT: $val.voNormWCT, wlcgWCT: $val.wlcgNormWCT, totalWCT: $val.totalNormWCT, delivered: $delivered, nonwlcg: $nonwlcg}
  ],

  summary: [
    #set keys = sorted($summary.keys(), $getVar('key_sorter', '', False))
    #for key in keys[:-1]
        {Site: '$key', WLCGAccounting: "$summary[$key]['accounting']", Subclusters: $summary[$key]['subclusters']},
    #end for
        #set key=keys[-1]
        {Site: '$key', WLCGAccounting: "$summary[$key]['accounting']", Subclusters: $summary[$key]['subclusters']}
  ],

  availability: [
    #set keys = sorted($availability.keys(), $getVar('key_sorter', '', False))
    #for site in keys[:-1]
      #set val=$availability[$site]
      {Site: '$site', Ownership: $val['ownership'], KSI2KSize: $val['size'], RSVAvail: $val['rsv'], Availability: $val['availability']},
    #end for
      #set key = keys[-1]
      #set val=$availability[$site]
      {Site: '$site', Ownership: $val['ownership'], KSI2KSize: $val['size'], RSVAvail: $val['rsv'], Availability: $val['availability']}
  ]

};

// Patch for width and/or minWidth Column values bug in non-scrolling DataTables
(function(){var B=YAHOO.widget.DataTable,A=YAHOO.util.Dom;B.prototype._setColumnWidth=function(I,D,J){I=this.getColumn(I);if(I){J=J||"hidden";if(!B._bStylesheetFallback){var N;if(!B._elStylesheet){N=document.createElement("style");N.type="text/css";B._elStylesheet=document.getElementsByTagName("head").item(0).appendChild(N)}if(B._elStylesheet){N=B._elStylesheet;var M=".yui-dt-col-"+I.getId();var K=B._oStylesheetRules[M];if(!K){if(N.styleSheet&&N.styleSheet.addRule){N.styleSheet.addRule(M,"overflow:"+J);N.styleSheet.addRule(M,"width:"+D);K=N.styleSheet.rules[N.styleSheet.rules.length-1]}else{if(N.sheet&&N.sheet.insertRule){N.sheet.insertRule(M+" {overflow:"+J+";width:"+D+";}",N.sheet.cssRules.length);K=N.sheet.cssRules[N.sheet.cssRules.length-1]}else{B._bStylesheetFallback=true}}B._oStylesheetRules[M]=K}else{K.style.overflow=J;K.style.width=D}return }B._bStylesheetFallback=true}if(B._bStylesheetFallback){if(D=="auto"){D=""}var C=this._elTbody?this._elTbody.rows.length:0;if(!this._aFallbackColResizer[C]){var H,G,F;var L=["var colIdx=oColumn.getKeyIndex();","oColumn.getThEl().firstChild.style.width="];for(H=C-1,G=2;H>=0;--H){L[G++]="this._elTbody.rows[";L[G++]=H;L[G++]="].cells[colIdx].firstChild.style.width=";L[G++]="this._elTbody.rows[";L[G++]=H;L[G++]="].cells[colIdx].style.width="}L[G]="sWidth;";L[G+1]="oColumn.getThEl().firstChild.style.overflow=";for(H=C-1,F=G+2;H>=0;--H){L[F++]="this._elTbody.rows[";L[F++]=H;L[F++]="].cells[colIdx].firstChild.style.overflow=";L[F++]="this._elTbody.rows[";L[F++]=H;L[F++]="].cells[colIdx].style.overflow="}L[F]="sOverflow;";this._aFallbackColResizer[C]=new Function("oColumn","sWidth","sOverflow",L.join(""))}var E=this._aFallbackColResizer[C];if(E){E.call(this,I,D,J);return }}}else{}};B.prototype._syncColWidths=function(){var J=this.get("scrollable");if(this._elTbody.rows.length>0){var M=this._oColumnSet.keys,C=this.getFirstTrEl();if(M&&C&&(C.cells.length===M.length)){var O=false;if(J&&(YAHOO.env.ua.gecko||YAHOO.env.ua.opera)){O=true;if(this.get("width")){this._elTheadContainer.style.width="";this._elTbodyContainer.style.width=""}else{this._elContainer.style.width=""}}var I,L,F=C.cells.length;for(I=0;I<F;I++){L=M[I];if(!L.width){this._setColumnWidth(L,"auto","visible")}}for(I=0;I<F;I++){L=M[I];var H=0;var E="hidden";if(!L.width){var G=L.getThEl();var K=C.cells[I];if(J){var N=(G.offsetWidth>K.offsetWidth)?G.firstChild:K.firstChild;if(G.offsetWidth!==K.offsetWidth||N.offsetWidth<L.minWidth){H=Math.max(0,L.minWidth,N.offsetWidth-(parseInt(A.getStyle(N,"paddingLeft"),10)|0)-(parseInt(A.getStyle(N,"paddingRight"),10)|0))}}else{if(K.offsetWidth<L.minWidth){E=K.offsetWidth?"visible":"hidden";H=Math.max(0,L.minWidth,K.offsetWidth-(parseInt(A.getStyle(K,"paddingLeft"),10)|0)-(parseInt(A.getStyle(K,"paddingRight"),10)|0))}}}else{H=L.width}if(L.hidden){L._nLastWidth=H;this._setColumnWidth(L,"1px","hidden")}else{if(H){this._setColumnWidth(L,H+"px",E)}}}if(O){var D=this.get("width");this._elTheadContainer.style.width=D;this._elTbodyContainer.style.width=D}}}this._syncScrollPadding()}})();
// Patch for initial hidden Columns bug
(function(){var A=YAHOO.util,B=YAHOO.env.ua,E=A.Event,C=A.Dom,D=YAHOO.widget.DataTable;D.prototype._initTheadEls=function(){var X,V,T,Z,I,M;if(!this._elThead){Z=this._elThead=document.createElement("thead");I=this._elA11yThead=document.createElement("thead");M=[Z,I];E.addListener(Z,"focus",this._onTheadFocus,this);E.addListener(Z,"keydown",this._onTheadKeydown,this);E.addListener(Z,"mouseover",this._onTableMouseover,this);E.addListener(Z,"mouseout",this._onTableMouseout,this);E.addListener(Z,"mousedown",this._onTableMousedown,this);E.addListener(Z,"mouseup",this._onTableMouseup,this);E.addListener(Z,"click",this._onTheadClick,this);E.addListener(Z.parentNode,"dblclick",this._onTableDblclick,this);this._elTheadContainer.firstChild.appendChild(I);this._elTbodyContainer.firstChild.appendChild(Z)}else{Z=this._elThead;I=this._elA11yThead;M=[Z,I];for(X=0;X<M.length;X++){for(V=M[X].rows.length-1;V>-1;V--){E.purgeElement(M[X].rows[V],true);M[X].removeChild(M[X].rows[V])}}}var N,d=this._oColumnSet;var H=d.tree;var L,P;for(T=0;T<M.length;T++){for(X=0;X<H.length;X++){var U=M[T].appendChild(document.createElement("tr"));P=(T===1)?this._sId+"-hdrow"+X+"-a11y":this._sId+"-hdrow"+X;U.id=P;for(V=0;V<H[X].length;V++){N=H[X][V];L=U.appendChild(document.createElement("th"));if(T===0){N._elTh=L}P=(T===1)?this._sId+"-th"+N.getId()+"-a11y":this._sId+"-th"+N.getId();L.id=P;L.yuiCellIndex=V;this._initThEl(L,N,X,V,(T===1))}if(T===0){if(X===0){C.addClass(U,D.CLASS_FIRST)}if(X===(H.length-1)){C.addClass(U,D.CLASS_LAST)}}}if(T===0){var R=d.headers[0];var J=d.headers[d.headers.length-1];for(X=0;X<R.length;X++){C.addClass(C.get(this._sId+"-th"+R[X]),D.CLASS_FIRST)}for(X=0;X<J.length;X++){C.addClass(C.get(this._sId+"-th"+J[X]),D.CLASS_LAST)}var Q=(A.DD)?true:false;var c=false;if(this._oConfigs.draggableColumns){for(X=0;X<this._oColumnSet.tree[0].length;X++){N=this._oColumnSet.tree[0][X];if(Q){L=N.getThEl();C.addClass(L,D.CLASS_DRAGGABLE);var O=D._initColumnDragTargetEl();N._dd=new YAHOO.widget.ColumnDD(this,N,L,O)}else{c=true}}}for(X=0;X<this._oColumnSet.keys.length;X++){N=this._oColumnSet.keys[X];if(N.resizeable){if(Q){L=N.getThEl();C.addClass(L,D.CLASS_RESIZEABLE);var G=L.firstChild;var F=G.appendChild(document.createElement("div"));F.id=this._sId+"-colresizer"+N.getId();N._elResizer=F;C.addClass(F,D.CLASS_RESIZER);var e=D._initColumnResizerProxyEl();N._ddResizer=new YAHOO.util.ColumnResizer(this,N,L,F.id,e);var W=function(f){E.stopPropagation(f)};E.addListener(F,"click",W)}else{c=true}}}if(c){}}else{}}for(var a=0,Y=this._oColumnSet.keys.length;a<Y;a++){if(this._oColumnSet.keys[a].hidden){var b=this._oColumnSet.keys[a];var S=b.getThEl();b._nLastWidth=S.offsetWidth-(parseInt(C.getStyle(S,"paddingLeft"),10)|0)-(parseInt(C.getStyle(S,"paddingRight"),10)|0);this._setColumnWidth(b.getKeyIndex(),"1px")}}if(B.webkit&&B.webkit<420){var K=this;setTimeout(function(){K._elThead.style.display=""},0);this._elThead.style.display="none"}}})();

YAHOO.util.Event.addListener(window, "load", function() {
    fcn = new function() {

        var wlcgColumnDefs = [
            {key:"Site", sortable:true, resizeable:true},
            {key:"VO", sortable:true, resizeable:true},
            {key:"Njobs", label:"Number of Jobs", sortable:true, resizeable:true},
            //{key:"SumCPU", label:"CPU Hours", sortable:true, resizeable:true},
            //{key:"NormSumCPU", label:"Normalized CPU Hours", sortable:true, resizeable:true},
            {key:"SumWCT", label:"Wall Hours", sortable:true, resizeable:true},
            {key:"NormSumWCT", label:"Normalized Wall Hours", sortable:true, resizeable:true},
            {key:"Start", label:"Start Date", sortable:true, resizeable:true},
            {key:"End", label:"End Date", sortable:true, resizeable:true},
            {key:"Norm", label:"Site normalization constant", sortable:true, resizeable:true}
        ];

        var gipColumnDefs = [
            {key:"Site", sortable:true, resizeable:true},
            {key:"Subcluster", sortable:true, resizeable:true},
            {key:"Processor", label:"Processor Model", sortable:true, resizeable:true},
            {key:"SI2K", label:"SI2K Score", sortable:true, resizeable:true},
            {key:"Cores", label:"Number of WN Cores", sortable:true, resizeable:true}
        ];

        var perc_formatter = function(elCell, oRecord, oColumn, oData) { 
            if (oData == null) return;
            var a = oData;
            elCell.innerHTML = String(a) + "%";
        }; 
 
        var sitenormColumnDefs = [
            {key:"Site", sortable:true, resizeable:true},
            {key:"GIPNorm", label:"Normalization Calculated by the GIP", sortable:true, resizeable:true},
            {key:"WLCGNorm", label:"Normalization Reported to WLCG", sortable:true, resizeable:true},
            {key:"Diff", label:"GIP Percent Difference", sortable:true, resizeable:true, formatter:perc_formatter}
        ];

        var cmsColumnDefs = [
            {key:"WLCGSite", label:"WLCG Accounting Name", sortable:true, resizeable:true},
            {key:"Pledge", label:"$pledge_year KSI2K Pledge", sortable:true, resizeable:true},
            {key:"Actual", label:"Measured KSI2K", sortable:true, resizeable:true},
            {key:"Goal", label:"Month goal of KSI2K-hours", sortable:true, resizeable:true},
            {key:"KSI2KAvail", label:"CMS KSI2K Availability", sortable:true, resizeable:true},
            {key:"OwnedWCT", label:"KSI2K-hours for owner VO", sortable:true, resizeable:true},
            {key:"wlcgWCT", label:"KSI2K-hours for WLCG VOs", sortable:true, resizeable:true},
            {key:"totalWCT", label:"KSI2K-hours for all VOs", sortable:true, resizeable:true},
            {key:"delivered", label:"Percent of WLCG goal ", sortable:true, resizeable:true, formatter:perc_formatter},
            {key:"nonwlcg", label:"Percent non-WLCG", sortable:true, resizeable:true, formatter:perc_formatter}
        ];

        var atlasColumnDefs = [
            {key:"WLCGSite", label:"WLCG Accounting Name", sortable:true, resizeable:true},
            {key:"Pledge", label:"$pledge_year KSI2K Pledge", sortable:true, resizeable:true},
            {key:"Actual", label:"Measured KSI2K", sortable:true, resizeable:true},
            {key:"Goal", label:"Month goal of KSI2K-hours", sortable:true, resizeable:true},
            {key:"KSI2KAvail", label:"ATLAS KSI2K Availability", sortable:true, resizeable:true},
            {key:"OwnedWCT", label:"KSI2K-hours for owner VO", sortable:true, resizeable:true},
            {key:"wlcgWCT", label:"KSI2K-hours for WLCG VOs", sortable:true, resizeable:true},
            {key:"totalWCT", label:"KSI2K-hours for all VOs", sortable:true, resizeable:true},
            {key:"delivered", label:"Percent of WLCG goal", sortable:true, resizeable:true, formatter:perc_formatter},
            {key:"nonwlcg", label:"Percent non-WLCG", sortable:true, resizeable:true, formatter:perc_formatter}
        ];

        var availabilityColumnDefs = [
            {key:"Site", label:"OSG Site name", sortable:true, resizeable:true},
            {key:"Ownership", label:"MoU VO Ownership", sortable:true, resizeable:true, formatter:perc_formatter},
            {key:"KSI2KSize", label:"MoU VO Owned KSI2K Size", sortable:true, resizeable:true},
            {key:"RSVAvail", label:"RSV Availability", sortable:true, resizeable:true, formatter:perc_formatter},
            {key:"Availability", label:"Month's MoU VO KSI2K-Availability", sortable:true, resizeable:true}
        ];

        var summaryColumnDefs = [
            {key:"Site", label:"OSG Site name", sortable:true, resizeable:true},
            {key:"WLCGAccounting", label:"WLCG Accounting Site", sortable:true, resizeable:true},
            {key:"Subclusters", label:"Number of GIP Subclusters", sortable:true, resizeable:true}
        ];

        this.wlcgDataSource = new YAHOO.util.DataSource(my_data.apel);
        this.wlcgDataSource.responseType = YAHOO.util.DataSource.TYPE_JSARRAY;
        this.wlcgDataSource.responseSchema = {
            fields: ["Site", "VO", "Njobs", "SumCPU", "NormSumCPU", "SumWCT", "NormSumWCT", "Start", "End", "Norm"]
        };

        this.gipDataSource = new YAHOO.util.DataSource(my_data.gip);
        this.gipDataSource.responseType = YAHOO.util.DataSource.TYPE_JSARRAY;
        this.gipDataSource.responseSchema = {
            fields: ["Site", "Cluster", "Subcluster", "Timestamp", "Processor", "Cores", "SI2K", "Ownership"]
        };

        this.sitenormDataSource = new YAHOO.util.DataSource(my_data.sitenorm);
        this.sitenormDataSource.responseType = YAHOO.util.DataSource.TYPE_JSARRAY;
        this.sitenormDataSource.responseSchema = {
            fields: ["Site", "GIPNorm", "WLCGNorm", "Diff"]
        };

        this.atlasDataSource = new YAHOO.util.DataSource(my_data.atlas_pledge);
        this.atlasDataSource.responseType = YAHOO.util.DataSource.TYPE_JSARRAY;
        this.atlasDataSource.responseSchema = {
            fields: ["WLCGSite", "Pledge", "Actual", "Goal", "KSI2KAvail", "OwnedWCT", "wlcgWCT", "totalWCT", "delivered", "nonwlcg"]
        };

        this.cmsDataSource = new YAHOO.util.DataSource(my_data.cms_pledge);
        this.cmsDataSource.responseType = YAHOO.util.DataSource.TYPE_JSARRAY;
        this.cmsDataSource.responseSchema = {
            fields: ["WLCGSite", "Pledge", "Actual", "Goal", "KSI2KAvail", "OwnedWCT", "wlcgWCT", "totalWCT", "delivered", "nonwlcg"]
        };

        this.availabilityDataSource = new YAHOO.util.DataSource(my_data.availability);
        this.availabilityDataSource.responseType = YAHOO.util.DataSource.TYPE_JSARRAY;
        this.availabilityDataSource.responseSchema = {
            fields: ["Site", "Ownership", "KSI2KSize", "RSVAvail", "Availability"]
        };

        this.summaryDataSource = new YAHOO.util.DataSource(my_data.summary);
        this.summaryDataSource.responseType = YAHOO.util.DataSource.TYPE_JSARRAY;
        this.summaryDataSource.responseSchema = {
            fields: ["Site", "WLCGAccounting", "Subclusters"]
        };

        this.myDataTable = new YAHOO.widget.DataTable("wlcg",
                wlcgColumnDefs, this.wlcgDataSource, {sortedBy:{key:"Site"}});

        this.myDataTable = new YAHOO.widget.DataTable("gip",
                gipColumnDefs, this.gipDataSource, {sortedBy:{key:"Site"}});

        this.myDataTable = new YAHOO.widget.DataTable("sitenorm",
                sitenormColumnDefs, this.sitenormDataSource, {sortedBy:{key:"Site"}});

        this.myDataTable = new YAHOO.widget.DataTable("cms",
                cmsColumnDefs, this.cmsDataSource, {sortedBy:{key:"WLCGSite"}});

        this.myDataTable = new YAHOO.widget.DataTable("atlas",
                atlasColumnDefs, this.atlasDataSource, {sortedBy:{key:"WLCGSite"}});

        this.myDataTable = new YAHOO.widget.DataTable("availability",
                availabilityColumnDefs, this.availabilityDataSource, {sortedBy:{key:"Site"}});

        this.myDataTable = new YAHOO.widget.DataTable("summary", summaryColumnDefs,
                this.summaryDataSource, {sortedBy:{key:"Site"}});

    };
});

</script>

<h3>Page Contents:</h3>

<ul>
    <li><a href="#wlcg">Per-site WLCG Accounting Summary</a></li>
    <li><a href="#atlas">USATLAS T2 WLCG Accounting Data</a></li>
    <li><a href="#cms">USCMS T2 WLCG Accounting Data</a></li>
    <li><a href="#gip">GIP Subcluster Summary</a></li>
    <li><a href="#sitenorm">Site Normalization Factors</a></li>
    <li><a href="#availability">Site Availability Measurements</a></li>
    <li><a href="#summary">Available Data Summary</a></li>
</ul>


<div>
<form action="$base_url/wlcg_reporting" method="get">
<p>Select a different month's data:</p>
<p><label for="year">Year:</label>
<select name="year">
    #for i in range(2007, $year+1)
        #if $i == $year
            <option selected value="$i">$i</option>
        #else
            <option value="$i">$i</option>
        #end if
    #end for
</select>
<label for="month">Month:</label>
<select name="month">
    #for i in range(1,13)
        #if $i == $month
            <option selected value="$i">$i</option>
        #else
            <option value="$i">$i</option>
        #end if
    #end for
</select>
<input type="submit" value="Go!">
</p>
</form>
</div>
<br/>

<p>This data was reported at $report_time</p>
<p>(Note: Click on the column headers to sort the table by that column.)</p>
<div id="wlcg"></div> 
<br/>
<hr/>

<h1>WLCG Pledge Information</h1>
<p>Each WLCG site has pledged a certain amount of kSI2K for their site; in this section, we compare the amount of pledged KSI2K hours to this month's accounting data.  The accounting data is measured in KSI2K-hours, which is the number of hours recorded by the accounting system multiplied by the site normalization factor (shown above).  Each WLCG site should attempt to hit this month's goal, which is the KSI2K pledge amount times the number of hours in the month times an efficiency factor.  The efficiency factor is currently 60%.
  The table below shows:
<ul>
  <li><strong>$pledge_year KSI2K Pledge:</strong> $pledge_year KSI2K pledge in the WLCG MoU</li>
  <li><strong>Month goal of KSI2K-hours:</strong> The corresponding number of KSI2K hours which should be achieved this month (assumes an efficiency of 60% from the pledged amount) </li>
  <li><strong>KSI2K-hours for owner VO</strong> The number of KSI2K-hours contributed to the VO which owns the site.</li>
  <li><strong>Owner VO's KSI2K-Availability</strong> <a href="#availability">Explained below</a>.  For each day of the month, multiply that day's available KSI2K times the owner VO's ownership percentage times the RSV-measured availability, then sum them up.</li>
  <li><strong>KSI2K-hours for WLCG</strong> The number of KSI2K-hours contributed to all WLCG VOs (atlas, cms, alice, lhcb).</li>
  <li><strong>KSI2K-hours for all VOs</strong> The number of KSI2K-hours contributed to all VOs.</li>
  <li><strong>Percent of WLCG goal</strong> The percentage of the goal delivered this month.  This is computed by (<strong>KSI2K-hours for WLCG</strong>)/(<strong>monthly goal</strong>). </li>
  <li><strong>Percent non-WLCG</strong> The percentage of the KSI2K-hours delivered to non-WLCG VOs out of the site's total for this month</li>
</ul>
Please note that the mapping from OSG site to WLCG site is not one-to-one.
Sometimes, several OSG sites put together compose a single WLCG site.  Further,
 the WLCG names are not the same as the OSG name.  For example, Nebraska is 
known as "T2_US_Nebraska" to the WLCG, or AGLT2 is "US-AGLT2".
</p>
<h2>ATLAS Sites</h2>
<div id="atlas"></div>
<h2>CMS Sites</h2>
<div id="cms"></div>

<br/>
<hr/>
<h1>GIP Subcluster Information</h1>

<p>In order to generate an accurate normalization factor, the site must 
   advertise the make-up of each cluster using the GIP.  Each cluster is 
   divided into heterogeneous (in terms of CPU model) subclusters.  When the
   GIP configuration is run, the site admin specifies, for each subcluster:
   <ul>
      <li>Subcluster name (must be unique)</li>
      <li>CPU Processor model</li>
      <li>Number of cores per subcluster</li>
      <li>(Optional override using alter-attributes.conf) The SI2K score per
          core.
      </li>
   </ul>
   The normalization factor is the average SI2K score, weighted by number of
   cores, then divided by 1000.
</p>
<p> The process of changing the SI2K score per core through the 
    alter-attributes.conf is <a href="https://twiki.grid.iu.edu/twiki/bin/view/InformationServices/GipSi2k">documented here</a>
</p>
<p>The table below shows the GIP-recorded subcluster information for each site.
</p>
#if $gip_report_time
<p>This data was reported at $gip_report_time.</p>
#end if
<div id="gip"></div>

<br/>
<hr/>
<h1>Availability Data</h1>
<p>(WARNING: Experimental metric).  A site's KSI2K-availability is calculated by
   multiplying the following three values, calculated daily, then summed over
   the whole month
   <ul>
      <li>The total cluster size, measured in KSI2K.</li>
      <li>The ownership percentage of the sponsoring VO.</li>
      <li>The RSV-measured daily availability percentage</li>
   </ul>
   Specifically, the first two bullet points are dependent on site admins giving
   the correct inputs (which is getting more accurate as site admins are being
   educated in the GIP).  The third bullet point is dependent on the reliability
   if the RSV measurements, which is a new component to the OSG.
   <br/>
   The below table shows, for each site, the average monthly value of the above
   bullet points, in addition to the total KSI2K-availability for the month.
   The first three values cannot be multiplied together to get the fourth; the
   first three are averages over the whole month, while the fourth is derived
   by computing the daily amount.
</p>
<br/>
<div id="availability"></div>

<br/>
<hr/>
<h1>Site Normalization Calculation</h1>
<p>The table below shows the calculated normalization constant (using the above
   table), the normalization constant reported to the WLCG, and the percent
   difference.  Nominally, all WLCG sites should focus on switching to the 
   GIP-based normalization constant from the manually-update one.
</p>
<div id="sitenorm"></div>

<br/>
<hr/>
<h1>Data Summary</h1>
<p>Finally, the following table shows the data available for each site.  Ideally,
   each site should have an accompanying WLCG Accounting name and more than one
   GIP subcluster; any incorrect data in the above tables is usually due to one or
   both of these missing.
</p>
<div id="summary"></div>

#end if

