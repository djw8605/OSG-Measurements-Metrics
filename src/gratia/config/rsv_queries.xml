<graphtool-config>

  <import module="gratia.database.query_handler">*</import>

  <import module="graphtool.database.queries">SqlQueries</import>
  <import module="graphtool.database.query_handler">*</import>
  <import module="time"/>

  <import file="$HOME/dbinfo/DBParam.xml" />

  <class type="SqlQueries" name="RSVSummaryQueries">

    <attribute name="display_name"> RSV Graphs </attribute>
    <attribute name="connection_manager"> RegistrationDB </attribute>

    <query name="all_summaries">
      <inputs>
        <input name="days" type="eval" kind="sql">35</input>
      </inputs>
      <sql>
SELECT
    starttime, time_length, 1
FROM rsv_summary
WHERE
    starttime > DATE_SUB(CURDATE(), INTERVAL :days DAY)
      </sql>
      <results module="graphtool.database.query_handler" function="simple_results_parser">
        <inputs>
          <input name="pivots"> 0,1 </input>
          <input name="results"> 2 </input>
        </inputs>
      </results>
    </query>

    <query name="reli_summary_hourly">
      <inputs>
        <input name="span">3600</input>
        <input name="starttime" type="datetime" kind="sql">time.time()-4*86400</input>
        <input name="endtime" type="datetime" kind="sql">time.time()</input>
        <input name="facility" kind="sql">.*</input>
        <input name="kind" kind="sql">Resource</input>
        <input name="fixed-height">False</input>
      </inputs>
      <sql>
select
  name,
  DATE_ADD(starttime, INTERVAL 5 HOUR),
  up,
  1-up-maintenance-unknown
from
  rsv_summary
where
     DATE_ADD(starttime, INTERVAL 6 HOUR) &gt;= :starttime AND starttime &lt; :endtime AND
     time_length = 3600 AND
     name regexp :facility AND
     resource_type=lower(:kind)
order by starttime asc
      </sql>
      <results module="graphtool.database.query_handler" function="results_parser">
        <inputs>
          <input name="pivots"> 0 </input>
          <input name="grouping"> 1 </input>
          <input name="results"> 2,3 </input>
          <input name="suppress_zeros"> False </input>
        </inputs>
      </results>
      <attribute name="graph_type"> QualityMap </attribute>
      <attribute name="pivot_name">Site</attribute>
      <attribute name="grouping_name">Time</attribute>
      <attribute name="title">Hourly RSV $kind Reliability</attribute>
      <attribute name="column_names">Reliability</attribute>
      <attribute name="column_units">%</attribute>
    </query>

    <query name="avail_summary_hourly">
      <inputs>
        <input name="span">3600</input>
        <input name="starttime" type="datetime" kind="sql">time.time()-4*86400</input>
        <input name="endtime" type="datetime" kind="sql">time.time()</input>
        <input name="facility" kind="sql">.*</input>
        <input name="kind" kind="sql">Resource</input>
        <input name="fixed-height">False</input>
      </inputs>
      <sql>
select
  name,
  DATE_ADD(starttime, INTERVAL 5 HOUR),
  up,
  unknown+critical+maintenance
from
  rsv_summary
where
     DATE_ADD(starttime, INTERVAL 6 HOUR) &gt;= :starttime AND starttime &lt; :endtime AND
     time_length = 3600 AND
     name regexp :facility AND
     resource_type=lower(:kind)
order by starttime asc
      </sql>
      <results module="graphtool.database.query_handler" function="results_parser">
        <inputs>
          <input name="pivots"> 0 </input>
          <input name="grouping"> 1 </input>
          <input name="results"> 2,3 </input> 
          <input name="suppress_zeros"> False </input>
        </inputs>
      </results>
      <attribute name="graph_type"> QualityMap </attribute>
      <attribute name="pivot_name">Site</attribute>
      <attribute name="grouping_name">Time</attribute>
      <attribute name="title">Hourly RSV $kind Availability</attribute>
      <attribute name="column_names">Availability</attribute>
      <attribute name="column_units">%</attribute>
    </query>

    <query name="reli_summary_daily">
      <inputs>
        <input name="span" kind="sql">86400</input>
        <input name="starttime" type="datetime" kind="sql">time.time()-14*86400</input>
        <input name="endtime" type="datetime" kind="sql">time.time()</input>
        <input name="facility" kind="sql">.*</input>
        <input name="kind" kind="sql">Resource</input>
        <input name="fixed-height">False</input>
      </inputs>
      <sql>
select
  name,
  starttime,
  up,
  1-up-maintenance-unknown
from
  rsv_summary
where
     DATE_ADD(starttime, INTERVAL 24+6 HOUR) &gt;= :starttime AND starttime &lt; :endtime AND
     time_length = :span AND
     name regexp :facility AND
     resource_type=lower(:kind)
order by starttime asc
      </sql>
      <results module="graphtool.database.query_handler" function="results_parser">
        <inputs>
          <input name="pivots"> 0 </input>
          <input name="grouping"> 1 </input>
          <input name="results"> 2,3 </input> 
          <input name="suppress_zeros"> False </input>
        </inputs>
      </results>
      <attribute name="graph_type"> QualityMap </attribute>
      <attribute name="pivot_name">Site</attribute>
      <attribute name="grouping_name">Time</attribute>
      <attribute name="title">Daily RSV $kind Reliability</attribute>
      <attribute name="column_names">Reliability</attribute>
      <attribute name="column_units">%</attribute>
    </query>

    <query name="avail_summary_daily">
      <inputs>
        <input name="span">86400</input>
        <input name="starttime" type="datetime" kind="sql">time.time()-14*86400</input>
        <input name="endtime" type="datetime" kind="sql">time.time()</input>
        <input name="facility" kind="sql">.*</input>
        <input name="kind" kind="sql">Resource</input>
        <input name="fixed-height">False</input>
      </inputs>
      <sql>
select
  name,
  DATE_ADD(starttime, INTERVAL 5 HOUR),
  up,
  unknown+critical+maintenance
from
  rsv_summary
where
     DATE_ADD(starttime, INTERVAL 24+6 HOUR) &gt;= :starttime AND starttime &lt; :endtime AND
     time_length = 86400 AND
     name regexp :facility AND
     resource_type=lower(:kind)
order by starttime asc
      </sql>
      <results module="graphtool.database.query_handler" function="results_parser">
        <inputs>
          <input name="pivots"> 0 </input>
          <input name="grouping"> 1 </input>
          <input name="results"> 2,3 </input> 
          <input name="suppress_zeros"> False </input>
        </inputs>
      </results>
      <attribute name="graph_type"> QualityMap </attribute>
      <attribute name="pivot_name">Site</attribute>
      <attribute name="grouping_name">Time</attribute>
      <attribute name="title">Daily RSV $kind Availability</attribute>
      <attribute name="column_names">Availability</attribute>
      <attribute name="column_units">%</attribute>
    </query>

  </class>

  <class type="SqlQueries" name="RSVQueries">

    <attribute name="display_name"> RSV Graphs </attribute>
    <attribute name="connection_manager"> RSVConnMan </attribute>

    <aggregate>
      <connection> rsv </connection>
    </aggregate>

    <query name="rsv_quality">
      <inputs>
        <input name="span" type="eval" kind="sql">7200</input>
        <input name="starttime" type="datetime" kind="sql">time.time()-4*86400</input>
        <input name="endtime" type="datetime" kind="sql">time.time()</input>
        <input name="facility" kind="sql">.*</input>
        <input name="metric" kind="sql">.*</input>
        <input name="fixed-height">False</input>
        <!--<input name="excludefacility" kind="sql">USCMS-FNAL-WC1-CE2|USCMS-FNAL-WC1-CE3|USCMS-FNAL-WC1-CE4|UCSDT2-B</input>-->
      </inputs>
      <sql>
select
  ServiceURI,
  from_unixtime(truncate(unix_timestamp(Timestamp)/:span, 0)*:span) as time,
  SUM(CASE MetricStatus WHEN "OK" THEN 1 ELSE 0 END),
  SUM(CASE MetricStatus WHEN "OK" THEN 0 WHEN "UNKNOWN" THEN 0 ELSE 1 END)
from
  MetricRecord
where
     Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
     ServiceURI regexp :facility AND
     MetricName regexp :metric
group by
  ServiceURI, time
      </sql>
      <results module="graphtool.database.query_handler" function="results_parser">
        <inputs>
          <input name="pivots"> 0 </input>
          <input name="grouping"> 1 </input>
          <input name="results"> 2,3 </input>
        </inputs>
      </results>
      <attribute name="graph_type"> QualityMap </attribute>
      <attribute name="pivot_name">Site</attribute>
      <attribute name="grouping_name">Time</attribute>
      <attribute name="title">RSV Site Quality</attribute>
      <attribute name="column_names">Successful, Failed</attribute>
      <attribute name="column_units">Probes, Probes</attribute>
    </query>

    <query name="rsv_reliability">
      <inputs>
        <input name="span" kind="sql" type="eval">7200</input>
        <input name="starttime" type="datetime" kind="sql">time.time()-2*86400</input>
        <input name="endtime" type="datetime" kind="sql">time.time()</input>
        <input name="facility" kind="sql">.*</input>
        <input name="metric" kind="sql">.*</input>
        <input name="fixed-height">False</input>
        <!--<input name="excludefacility" kind="sql">USCMS-FNAL-WC1-CE2|USCMS-FNAL-WC1-CE3|USCMS-FNAL-WC1-CE4|UCSDT2-B</input>-->
      </inputs>
      <sql>
select
  ServiceURI,
  from_unixtime(truncate(unix_timestamp(Timestamp)/:span, 0)*:span) as time,
  sum(CASE MetricStatus WHEN "OK" THEN 1 ELSE 0 END),
  sum(CASE MetricStatus WHEN "OK" THEN 0 WHEN "UNKNOWN" THEN 0 ELSE 1 END)
from
  MetricRecord
where
     Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
     ServiceURI regexp :facility AND
     MetricName regexp :metric
group by
  ServiceURI, time
      </sql>
      <results module="gratia.database.query_handler" function="rsv_parser">
        <inputs>
          <input name="pivots"> 0 </input>
          <input name="grouping"> 1 </input>
          <input name="results"> 2,3 </input>
        </inputs>
      </results>
      <attribute name="graph_type"> QualityMap </attribute>
      <attribute name="pivot_name">Site</attribute>
      <attribute name="grouping_name">Time</attribute>
      <attribute name="title">RSV Site Quality</attribute>
      <attribute name="column_names">Successful, Failed</attribute>
      <attribute name="column_units">Probes, Probes</attribute>
    </query>

    <query name="rsv_reliability_daily">
      <inputs>
        <input name="span" type="eval">86400</input>
        <input name="starttime" type="datetime" kind="sql">time.time()-14*86400</input>
        <input name="endtime" type="datetime" kind="sql">time.time()</input>
        <input name="facility" kind="sql">.*</input>
        <input name="metric" kind="sql">.*</input>
        <input name="fixed-height">False</input>
      </inputs>
      <sql>
select
  ServiceURI,
  from_unixtime(truncate(unix_timestamp(Timestamp)/7200, 0)*7200) as time,
  SUM(CASE MetricStatus WHEN "OK" THEN 1 ELSE 0 END),
  SUM(CASE MetricStatus WHEN "OK" THEN 0 WHEN "UNKNOWN" THEN 0 ELSE 1 END)
from
  MetricRecord
where
     Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
     ServiceURI regexp :facility AND
     MetricName regexp :metric
group by
  ServiceURI, time
      </sql>
      <results module="gratia.database.query_handler" function="rsv_daily_parser">
        <inputs>
          <input name="pivots"> 0 </input>
          <input name="grouping"> 1 </input>
          <input name="results"> 2,3 </input>
        </inputs>
      </results>
      <attribute name="graph_type"> QualityMap </attribute>
      <attribute name="pivot_name">Site</attribute>
      <attribute name="grouping_name">Time</attribute>
      <attribute name="title">RSV Site Quality</attribute>
      <attribute name="column_names">Successful, Failed</attribute>
      <attribute name="column_units">Probes, Probes</attribute>
    </query>

    <query name="rsv_reliability_total">
      <inputs>
        <input name="starttime" type="datetime" kind="sql">time.time()-14*86400</input>
        <input name="endtime" type="datetime" kind="sql">time.time()</input>
        <input name="facility" kind="sql">.*</input>
        <input name="metric" kind="sql">.*</input>
        <input name="fixed-height">False</input>
      </inputs>
      <sql>
select
  ServiceURI,
  from_unixtime(truncate(unix_timestamp(Timestamp)/7200, 0)*7200) as time,
  sum(CASE MetricStatus WHEN "OK" THEN 1 ELSE 0 END),
  sum(CASE MetricStatus WHEN "OK" THEN 0 WHEN "UNKNOWN" THEN 0 ELSE 1 END)
from
  MetricRecord
where
     Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
     ServiceURI regexp :facility AND
     MetricName regexp :metric
group by
  ServiceURI, time
      </sql>
      <results module="gratia.database.query_handler" function="rsv_total_parser"/>
      <attribute name="graph_type"/>
      <attribute name="pivot_name">Site</attribute>
      <attribute name="title">RSV Site Total Availability</attribute>
    </query>

    <query name="service_to_resource">
        <!-- Build a map from (service_type, resource_name) -> parent resource -->
        <sql>
            SELECT OIMS.name as service_type, OIMR.name, COALESCE(OIMR2.name, OIMR.name) as parent_name
            FROM oim.resource_service OIMRS
            JOIN oim.service OIMS ON OIMS.service_id = OIMRS.service_id
            JOIN oim.resource OIMR ON OIMRS.resource_id = OIMR.resource_id
            LEFT OUTER JOIN oim.resource OIMR2 ON OIMR2.resource_id = OIMR.parent_resource_id
            JOIN oim.resource_ext_attributes OIME on OIME.resource_id = OIMR.resource_id
            WHERE OIME.interop_monitoring = 1 and OIMR.osg_grid_type_id=1
        </sql>
      <results module="graphtool.database.query_handler" function="simple_results_parser">
        <inputs>
          <input name="pivots">0, 1</input>
          <input name="results">2</input>
        </inputs>
      </results>
    </query>

    <query name="rsv_wlcg_availability">
        <inputs>
            <input name="starttime" type="datetime" kind="sql">time.time()-86400</input>
            <input name="endtime" type="datetime" kind="sql">time.time()</input>
            <input name="facility" kind="sql">.*</input>
            <input name="metric" kind="sql">.*</input>
        </inputs>
        <sql>
        SELECT COALESCE(OIMR.Name, MR.ServiceURI), MR.MetricName, MR.Timestamp, MR.MetricStatus
        FROM MetricRecord MR
        LEFT OUTER JOIN oim.resource OIMR on MR.ServiceURI=OIMR.fqdn
        WHERE
            MR.Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
            ServiceURI regexp :facility AND
            MetricName regexp :metric
        </sql>
        <results module="gratia.database.query_handler" function="wlcg_availability"/>
        <attribute name="pivot_name">Site</attribute>
        <attribute name="title">WLCG Site Availability</attribute>
    </query>

    <query name="rsv_wlcg_reliability">
        <inputs>
            <input name="starttime" type="datetime" kind="sql">time.time()-86400</input>
            <input name="endtime" type="datetime" kind="sql">time.time()</input>
            <input name="facility" kind="sql">.*</input>
            <input name="metric" kind="sql">.*</input>
        </inputs>
        <sql>
        SELECT COALESCE(OIMR.Name, MR.ServiceURI), MR.MetricName, MR.Timestamp,null,MR.MetricStatus
            FROM MetricRecord MR
            LEFT OUTER JOIN oim.resource OIMR on MR.ServiceURI=OIMR.fqdn
            WHERE
                MR.Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
                ServiceURI regexp :facility AND
                MetricName regexp :metric
        UNION
        SELECT OIMR.Name, "Maintenance", RD.start_time, RD.end_time, "MAINTENANCE"
            FROM oim.resource_downtime RD
            JOIN oim.resource OIMR on OIMR.resource_id = RD.resource_id
            WHERE
                ((RD.end_time &gt;= :starttime AND RD.end_time &lt; :endtime) OR
                (RD.start_time &gt;= :starttime AND RD.start_time &lt; :endtime) OR
                (RD.start_time &lt;= :starttime AND RD.end_time &gt;= :endtime)) AND
                OIMR.fqdn regexp :facility
        </sql>
        <results module="gratia.database.query_handler" function="wlcg_availability"/>
        <attribute name="pivot_name">Site</attribute>
        <attribute name="title">WLCG Site Availability</attribute>
    </query>

    <query name="rsv_sam_availability">
        <inputs>
            <input name="starttime" type="datetime" kind="sql">time.time()-86400</input>
            <input name="endtime" type="datetime" kind="sql">time.time()</input>
            <input name="facility" kind="sql">.*</input>
            <input name="metric" kind="sql">.*</input>
        </inputs>
        <sql>
        SELECT COALESCE(OIMR.Name, MR.ServiceURI), MR.MetricName, MR.Timestamp, MR.MetricStatus
        FROM MetricRecord MR
        LEFT OUTER JOIN oim.resource OIMR on MR.ServiceURI=OIMR.fqdn
        WHERE
            MR.Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
            ServiceURI regexp :facility AND
            MetricName regexp :metric
        </sql>
        <results module="gratia.database.query_handler" function="sam_site_availability"/>
        <attribute name="pivot_name">Site</attribute>
        <attribute name="title">WLCG Site Availability</attribute>
    </query>
        
    <query name="rsv_sam_reliability">
        <inputs>
            <input name="starttime" type="datetime" kind="sql">time.time()-86400</input>
            <input name="endtime" type="datetime" kind="sql">time.time()</input>
            <input name="facility" kind="sql">.*</input>
            <input name="metric" kind="sql">.*</input>
        </inputs>
        <sql>
        SELECT COALESCE(OIMR.Name, MR.ServiceURI), MR.MetricName, MR.Timestamp,null,MR.MetricStatus
            FROM MetricRecord MR
            LEFT OUTER JOIN oim.resource OIMR on MR.ServiceURI=OIMR.fqdn
            WHERE
                MR.Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
                ServiceURI regexp :facility AND
                MetricName regexp :metric
        UNION   
        SELECT OIMR.Name, "Maintenance", RD.start_time, RD.end_time, "MAINTENANCE"
            FROM oim.resource_downtime RD
            JOIN oim.resource OIMR on OIMR.resource_id = RD.resource_id
            WHERE
                ((RD.end_time &gt;= :starttime AND RD.end_time &lt; :endtime) OR
                (RD.start_time &gt;= :starttime AND RD.start_time &lt; :endtime) OR
                (RD.start_time &lt;= :starttime AND RD.end_time &gt;= :endtime)) AND
                OIMR.fqdn regexp :facility
        </sql>
        <results module="gratia.database.query_handler" function="sam_site_availability"/>
        <attribute name="pivot_name">Site</attribute>
        <attribute name="title">WLCG Site Availability</attribute>
    </query>

    <query name="wlcg_site_avail">
        <inputs>
            <input name="starttime" type="datetime" kind="sql">time.time()-86400</input>
            <input name="endtime" type="datetime" kind="sql">time.time()</input>
            <input name="facility" kind="sql">.*</input>
            <input name="metric" kind="sql">.*</input>
        </inputs>
        <sql>
        SELECT COALESCE(OIMR.Name, MR.ServiceURI), MR.MetricName, MR.Timestamp, MR.MetricStatus
        FROM MetricRecord MR
        LEFT OUTER JOIN oim.resource OIMR on MR.ServiceURI=OIMR.fqdn
        WHERE
            MR.Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
            ServiceURI regexp :facility AND
            MetricName regexp :metric
        </sql>
        <results module="gratia.database.query_handler" function="wlcg_site_availability"/>
        <attribute name="pivot_name">Site</attribute>
        <attribute name="title">WLCG Site Availability</attribute>
    </query>

    <query name="wlcg_site_reliability">
        <inputs>
            <input name="starttime" type="datetime" kind="sql">time.time()-86400</input>
            <input name="endtime" type="datetime" kind="sql">time.time()</input>
            <input name="facility" kind="sql">.*</input>
            <input name="metric" kind="sql">.*</input>
        </inputs>
        <sql>
        SELECT COALESCE(OIMR.Name, MR.ServiceURI), MR.MetricName, MR.Timestamp,null,MR.MetricStatus
            FROM MetricRecord MR
            LEFT OUTER JOIN oim.resource OIMR on MR.ServiceURI=OIMR.fqdn
            WHERE
                MR.Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
                ServiceURI regexp :facility AND
                MetricName regexp :metric
        UNION
        SELECT OIMR.Name, "Maintenance", RD.start_time, RD.end_time, "MAINTENANCE"
            FROM oim.resource_downtime RD
            JOIN oim.resource OIMR on OIMR.resource_id = RD.resource_id
            WHERE
                ((RD.end_time &gt;= :starttime AND RD.end_time &lt; :endtime) OR
                (RD.start_time &gt;= :starttime AND RD.start_time &lt; :endtime) OR
                (RD.start_time &lt;= :starttime AND RD.end_time &gt;= :endtime)) AND
                OIMR.fqdn regexp :facility
        </sql>
        <results module="gratia.database.query_handler" function="wlcg_site_availability"/>
        <attribute name="pivot_name">Site</attribute>
        <attribute name="title">WLCG Site Availability</attribute>
    </query>

    <query name="wlcg_last_status">
        <inputs>
            <input name="starttime" type="datetime" kind="sql">time.time()</input>
            <input name="facility" kind="sql">.*</input>
            <input name="metric" kind="sql">.*</input>
        </inputs>
        <sql>
        SELECT COALESCE(OIMR.Name, MR.ServiceURI) as SiteName, MR.MetricName, foo.Timestamp, MR.MetricStatus
        FROM (SELECT ServiceURI, MetricName, max(Timestamp) AS Timestamp FROM MetricRecord
              WHERE
                  Timestamp &lt;= :starttime AND
                  Timestamp &gt; DATE_SUB(:starttime, INTERVAL 1 DAY) AND
                  ServiceURI regexp :facility AND
                  MetricName regexp :metric
              GROUP BY ServiceURI, MetricName) AS foo
        JOIN MetricRecord MR ON MR.ServiceURI=foo.ServiceURI AND MR.MetricName=foo.MetricName AND MR.Timestamp=foo.Timestamp
        LEFT OUTER JOIN oim.resource OIMR on MR.ServiceURI=OIMR.fqdn
        </sql>
        <results module="gratia.database.query_handler" function="simple_results_parser">
            <inputs>
                <input name="pivots">0,1,2</input>
                <input name="results">3</input>
            </inputs>
        </results>
        <attribute name="pivot_name">Site</attribute>
        <attribute name="title">Last Test Status</attribute>
    </query>

    <query name="rsv_metric_quality">
      <inputs>
        <input name="span" type="eval" kind="sql">7200</input>
        <input name="starttime" type="datetime" kind="sql">time.time()-4*86400</input>
        <input name="endtime" type="datetime" kind="sql">time.time()</input>
        <input name="facility" kind="sql">.*</input>
        <input name="metric" kind="sql">.*</input>
        <!--<input name="excludefacility" kind="sql">USCMS-FNAL-WC1-CE2|USCMS-FNAL-WC1-CE3|USCMS-FNAL-WC1-CE4|UCSDT2-B</input>-->
      </inputs>
      <sql>
select
  MetricName,
  from_unixtime(truncate(unix_timestamp(Timestamp)/:span, 0)*:span) as time,
  SUM(CASE MetricStatus WHEN "OK" THEN 1 ELSE 0 END),
  SUM(CASE MetricStatus WHEN "OK" THEN 0 WHEN "UNKNOWN" THEN 0 ELSE 1 END)
from
  MetricRecord
where
     Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
     ServiceURI regexp :facility AND
     MetricName regexp :metric
group by
  MetricName, time
      </sql>
      <results module="graphtool.database.query_handler" function="results_parser">
        <inputs>
          <input name="pivots"> 0 </input>
          <input name="grouping"> 1 </input>
          <input name="results"> 2,3 </input>
        </inputs>
      </results>
      <attribute name="graph_type"> QualityMap </attribute>
      <attribute name="pivot_name">Site</attribute>
      <attribute name="grouping_name">Time</attribute>
      <attribute name="title">RSV Quality for $facility</attribute>
      <attribute name="column_names">Successful, Failed</attribute>
      <attribute name="column_units">Probes, Probes</attribute>
    </query>

    <query name="rsv_count">
      <inputs>
        <input name="span" type="eval" kind="sql">7200</input>
        <input name="starttime" type="datetime" kind="sql">time.time()-4*86400</input>
        <input name="endtime" type="datetime" kind="sql">time.time()</input>
        <input name="facility" kind="sql">.*</input>
        <!--<input name="excludefacility" kind="sql">USCMS-FNAL-WC1-CE2|USCMS-FNAL-WC1-CE3|USCMS-FNAL-WC1-CE4|UCSDT2-B</input>-->
      </inputs>
      <sql>
select
  ServiceURI,
  from_unixtime(truncate(unix_timestamp(Timestamp)/:span, 0)*:span) as time,
  COUNT(*)
from
  MetricRecord
where
     Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
     ServiceURI regexp :facility
group by
  ServiceURI, time
      </sql>
      <results module="graphtool.database.query_handler" function="results_parser">
        <inputs>
          <input name="pivots"> 0 </input>
          <input name="grouping"> 1 </input>
          <input name="results"> 2 </input>
        </inputs>
      </results>
      <attribute name="graph_type"> GratiaStackedBar </attribute>
      <attribute name="pivot_name">Site</attribute>
      <attribute name="grouping_name">Time</attribute>
      <attribute name="title">RSV Probe Count</attribute>
      <attribute name="column_names">Probes Run</attribute>
      <attribute name="column_units"/>
    </query>

    <query name="rsv_dist">
      <inputs>
        <input name="starttime" type="datetime" kind="sql">time.time()-4*86400</input>
        <input name="endtime" type="datetime" kind="sql">time.time()</input>
        <input name="facility" kind="sql">.*</input>
        <!--<input name="excludefacility" kind="sql">USCMS-FNAL-WC1-CE2|USCMS-FNAL-WC1-CE3|USCMS-FNAL-WC1-CE4|UCSDT2-B</input>-->
      </inputs>
      <sql>
select
  MetricStatus,
  COUNT(*)
from
  MetricRecord
where
     Timestamp &gt;= :starttime AND Timestamp &lt; :endtime AND
     ServiceURI regexp :facility
group by
  MetricStatus
      </sql>
      <results module="graphtool.database.query_handler" function="simple_results_parser">
        <inputs>
          <input name="pivots"> 0 </input>
          <input name="results"> 1 </input>
        </inputs>
      </results>
      <attribute name="graph_type"> GratiaPie </attribute>
      <attribute name="pivot_name">Status</attribute>
      <attribute name="title">RSV Status Distribution</attribute>
      <attribute name="column_names">Status</attribute>
      <attribute name="column_units"/>
    </query>

    <query name="failed_tests">
        <inputs>
            <input name="span" type="eval" kind="sql">7200</input>
            <input name="errorstart" type="datetime" kind="sql">time.time()-4*86400</input>
            <input name="facility" kind="sql">Nebraska</input>
        </inputs>
        <sql>
select
    SummaryData,
    GatheredAt,
    DetailsData,
    MetricType
from MetricRecord
where Timestamp &gt;=:errorstart AND Timestamp &lt; :errorstart + INTERVAL :span seconds
        </sql>
        <results module="gratia.database.query_handler" function="fake_parser"/>
        <attribute name="graph_type"/>
        <attribute name="title">Failed RSV Tests</attribute>
    </query>

  </class>

</graphtool-config>
